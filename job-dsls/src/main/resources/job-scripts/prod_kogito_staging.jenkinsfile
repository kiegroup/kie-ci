import groovy.json.JsonSlurper
import java.net.URLEncoder

PNC_API_URL = PNC_API_URL.trim()
STAGING_BASE_PATH = STAGING_BASE_PATH.trim()
MILESTONE = MILESTONE.trim()

node {
    def projects = [
        [
            name: "kiegroup/kogito-rhba",
            artifacts: [
                [product: "kogito", group: "org.kie.rhba", name: "kogito", package: "zip", classifier: "kogito-and-optaplanner-quickstarts", stagingNamePrefix: 'rhdm'],
                [product: "kogito", group: "org.kie.rhba", name: "kogito", package: "zip", classifier: "kogito-and-optaplanner-quickstarts", stagingNamePrefix: 'rhpam']
            ]
        ]
    ]

    stage("Print variables") {
        println "[INFO] PNC_API_URL: ${PNC_API_URL}"
        println "[INFO] STAGING_BASE_PATH: ${STAGING_BASE_PATH}"
        println "[INFO] MILESTONE: ${MILESTONE}"
    }

    stage("Staging") {
        for (project in projects) {
            println "[INFO] staging artifacts for project: ${project.name}"
            def projectId = getProjectId(project.name)
            def lastVersion = getLastProjectVersion(projectId, MILESTONE)

            for (artifact in project.artifacts) {
                def identifier = identifier(artifact, lastVersion)
                println "[INFO] staging artifact: ${identifier} for version '${lastVersion}'"

                def artifactMetadata = getArtifactMetadata(identifier)
                def artifactPath = stagingPath(artifact, lastVersion)
                def artifactDirectoryPath = artifactPath - ~/\/[^\/]+$/

                println "[INFO] (re)creating staging target path in: ${artifactPath}"
                createStagingPath(artifactDirectoryPath)

                println "[INFO] staging artifact from: ${artifactMetadata.publicUrl}"
                stageArtifact(artifactMetadata.publicUrl, artifactPath)

                println "[INFO] verifying artifact checksum with: ${artifactMetadata.md5}"
                verifyStaged(artifactPath, artifactMetadata.md5)
            }
        }
    }
}

/*
 * PNC API helper
 */
def queryPNC(endpoint, params) {
    def queryURL = "${PNC_API_URL}/${endpoint}?" + encodeParams(params)
    def response = sh(script: "curl -s -X GET --header \"Accept: application/json\" \"${queryURL}\"", returnStdout: true)
    return new JsonSlurper().parseText(response)
}

def encodeParams(params) {
    return params.collect({ it.getKey() + "=" + encode(it.getValue()) }).join("&")
}

def encode(text) {
    return URLEncoder.encode(text, "UTF-8")
}

/*
 * PNC API calls
 */
def getProjectId(projectName) {
    def endpoint = "projects"
    def params = [q: "name==${projectName}"]
    def projects = queryPNC(endpoint, params)
    def project = projects.content.first()
    return project.id
}

def getLastProjectVersion(projectId, milestone) {
    def endpoint = "projects/${projectId}/builds"
    def params = [q: "productMilestone.version==${milestone};status==SUCCESS;temporaryBuild==false"]
    def projectBuilds = queryPNC(endpoint, params)
    def lastprojectBuild = projectBuilds.content.max({ it.attributes.BREW_BUILD_VERSION })
    return lastprojectBuild.attributes.BREW_BUILD_VERSION
}

def getArtifactMetadata(identifier) {
    def endpoint = "artifacts"
    def params = [q: "identifier==${identifier}"]
    def artifacts = queryPNC(endpoint, params)
    def artifact = artifacts.content.first()
    return [
        publicUrl: artifact.publicUrl,
        md5: artifact.md5
    ]
}

/*
 * Auxiliary methods
 */
def identifier(artifact, version) {
    def identifierParts = [artifact.group, artifact.name, artifact.package, version, artifact.classifier]
    return identifierParts.findAll({ it != null }).join(":")
}

/*
 * Staging management
 */
def stagingPath(artifact, version) {
    def productStagingCode = [artifact.product, MILESTONE].join("-")
    def productStagingPath = "${STAGING_BASE_PATH}/${artifact.product}/${productStagingCode}"
    def finalVersion = version - ~/\.[^\.]+$/
    def artifactName = [artifact.stagingNamePrefix, finalVersion, artifact.classifier].findAll({ it != null }).join("-")
    return "${productStagingPath}/${artifactName}.${artifact.package}"
}

def createStagingPath(path) {
    remoteExec("mkdir -m 775 -p ${path}")
    remoteExec("chgrp jboss-prod ${path}")
}

def stageArtifact(url, path) {
    println "[INFO] staging ${url} to ${path}"
    remoteExec("curl -s ${url} -o ${path}")
    remoteExec("chmod 664 ${path}")
    remoteExec("chgrp jboss-prod ${path}")
}

def verifyStaged(path, md5) {
    def output = remoteExec("md5sum ${path}")
    def (outputMd5, outputPath) = output.split(/\s+/)
    if (path != outputPath) {
        error("Couldn't compute the checksum for ${path}: ${output}")
    } else if (md5 != outputMd5) {
        error("${path} checksum doesn't match. Expected ${md5}, got ${outputMd5}")
    }
}

def remoteExec(command) {
    sshagent(['rcm-publish-server']) {
        return sh(script: "ssh -o StrictHostKeyChecking=no rhba@rcm-guest.app.eng.bos.redhat.com '${command}'", returnStdout: true)
    }
}
