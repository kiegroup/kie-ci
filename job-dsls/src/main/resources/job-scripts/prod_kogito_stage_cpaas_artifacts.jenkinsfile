@Library('jenkins-pipeline-shared-libraries')_

def artifacts = [
    [originClassifier: 'kogito-and-optaplanner-quickstarts.zip', finalClassifier: 'kogito-and-optaplanner-quickstarts.zip', info: 'Renaming quickstarts zip'],
    [originClassifier: 'maven-repository.zip', finalClassifier: 'kogito-maven-repository.zip', info: 'Renaming maven repository zip'],
    [originClassifier: 'license.zip', finalClassifier: 'kogito-licenses.zip', info: 'Renaming licenses zip'],
    [originClassifier: 'src.zip', finalClassifier: 'kogito-sources.zip', info: 'Renaming sources zip']
]

pipeline {
    agent {
        label 'kie-rhel7 && !built-in'
    }

    environment {
        PRODUCT_NAME = PRODUCT_NAME.trim()
        VERSION = VERSION.trim()
        RHPAM_VERSION = RHPAM_VERSION.trim()
        RCM_HOST = RCM_HOST.trim()
        STAGING_BASE_PATH = "${RCM_GUEST_FOLDER}"
        KOGITO_FOLDER_PATH = "${STAGING_BASE_PATH}/${PRODUCT_NAME}/${PRODUCT_NAME}-${VERSION}"
        KOGITO_FOLDER_PATH_RELATIVE = "staging/${PRODUCT_NAME}/${PRODUCT_NAME}-${VERSION}"
    }

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Print variables') {
            steps {
                println "[INFO] PRODUCT_NAME: ${PRODUCT_NAME}"
                println "[INFO] VERSION: ${VERSION}"
                println "[INFO] RHPAM_VERSION: ${RHPAM_VERSION}"
                println "[INFO] RCM_HOST: ${RCM_HOST}"
                println "[INFO] STAGING_BASE_PATH: ${STAGING_BASE_PATH}"
            }
        }

        stage('Clone integration-platform-tooling repository') {
            steps {
                sh "git clone ${INTEGRATION_PLATFORM_TOOLING_REPOSITORY} integration-platform-tooling"
            }
        }

        stage('Create offliner zip') {
            steps {
                script {
                    createOfflinerZip()
                }
            }
        }

        stage('Rename artifacts produced by CPaaS') {
            steps {
                script {
                    for (artifact in artifacts) {
                        renameArtifact(artifact)
                    }
                }
            }
        }

        stage('Generate maven repository text') {
            steps {
                script {
                    generateMavenRepositoryText()
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

def createOfflinerZip() {
    println 'Creating offliner zip'
    def milestoneVersion = getMilestoneVersion(VERSION)
    def offlinerFolderName = "${PRODUCT_NAME}-${milestoneVersion}-offliner"

    def localOfflinerFolderPath = "${offlinerFolderName}"
    sh "mkdir -p ${localOfflinerFolderPath}"

    util.withKerberos('rhba-prod-keytab') {
        sh "rsync -rlp --info=progress2 rhba-prod@${RCM_HOST}:${KOGITO_FOLDER_PATH_RELATIVE}/offliner.txt ${localOfflinerFolderPath}/offliner.txt"
    }

    sh "cp integration-platform-tooling/scripts/rhba/build-offline-repo.sh ${localOfflinerFolderPath}/offline-repo-builder.sh"
    sh "zip -r rhpam-${RHPAM_VERSION}-kogito-offliner.zip ${localOfflinerFolderPath}"

    util.withKerberos('rhba-prod-keytab') {
        sh "rsync -rlp --info=progress2 rhpam-${RHPAM_VERSION}-kogito-offliner.zip rhba-prod@${RCM_HOST}:${KOGITO_FOLDER_PATH_RELATIVE}"
    }
}

def renameArtifact(artifact) {
    def artifactPath = "${KOGITO_FOLDER_PATH}/kogito-${VERSION}-${artifact.originClassifier}"
    def targetArtifactPath = "${KOGITO_FOLDER_PATH}/rhpam-${RHPAM_VERSION}-${artifact.finalClassifier}"
    println "${artifact.info} ${artifactPath} to ${targetArtifactPath}"
    remoteExec("mv ${artifactPath} ${targetArtifactPath}")
}

def generateMavenRepositoryText() {
    println 'Generating maven repository text file'
    def mavenRepoFileName = "rhpam-${RHPAM_VERSION}-kogito-maven-repository"
    def relativeTargetMavenRepoFileName = "${KOGITO_FOLDER_PATH_RELATIVE}/${mavenRepoFileName}"

    // download maven repo zip
    util.withKerberos('rhba-prod-keytab') {
        sh "rsync -rlp --info=progress2 rhba-prod@${RCM_HOST}:${relativeTargetMavenRepoFileName}.zip ${mavenRepoFileName}.zip"
    }

    sh "unzip -t ${mavenRepoFileName}.zip > ${mavenRepoFileName}.text"

    // push maven repo extraction
    util.withKerberos('rhba-prod-keytab') {
        sh "rsync -rlp --info=progress2 ${mavenRepoFileName}.text rhba-prod@${RCM_HOST}:${relativeTargetMavenRepoFileName}.text"
    }
}

def getMilestoneVersion(version) {
    return version.substring(0, version.lastIndexOf('.'))
}

def remoteExec(command) {
    util.withKerberos('rhba-prod-keytab') {
        return sh(script: "ssh rhba-prod@${RCM_HOST} '${command}'", returnStdout: true)
    }
}
