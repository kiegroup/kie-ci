import groovy.json.JsonSlurper
import java.net.URLEncoder

def projects = ["kiegroup/drools", "kiegroup/kogito-runtimes"] // Projects to find the productized version in a milestone
def productId = "${env.PRODUCT_ID.trim() ?: '155'}"  // ID of OpenShift-Serverless-Logic product

def projectsAndVersions = [:]
def imagesTags = [:]
def milestoneId = ""
def milestone = ""


pipeline {
    agent {
        label 'kie-rhel7 && !built-in'
    }
    stages {
        stage('Print variables') {
            steps {
                println "[INFO] PNC_API_URL: ${PNC_API_URL}"
                println "[INFO] QUARKUS_VERSION: ${QUARKUS_VERSION}"
                println "[INFO] PROJECTS: ${projects}"
                println "[INFO] PRODUCT_ID: ${productId}"
                println "[INFO] DATA_INDEX_EPHEMERAL_BREW: ${DATA_INDEX_EPHEMERAL_BREW}"
            }
        }
        stage('Fetch current milestone') {
            steps {
                script {
                    if (env.MILESTONE) {
                        println '[INFO] Milestone defined as part of the job parameters.'
                        milestone = env.MILESTONE
                        milestoneId = getMilestoneId(productId, milestone)
                        if (!milestoneId) {
                            error "[ERROR] Could not find ${milestone} milestone. Stopping the job execution."
                        }
                    } else {
                        println '[INFO] Milestone was not defined as part of the job parameters. Using the latest available milestone for the product.'
                        milestone = getCurrentMilestone(productId)
                        milestoneId = getCurrentMilestoneId(productId)
                    }
                    println "[INFO] MILESTONE: ${milestone}"
                    println "[INFO] MILESTONE_ID: ${milestoneId}"
                }
            }
        }
        stage('Fetch builds versions') {
            steps {
                script {
                    projectsAndVersions = getBuildsFromMilestone(milestoneId, projects)
                    println "[INFO] projects and versions ${projectsAndVersions}"
                    if (!validateProjectsVersions(projectsAndVersions)) {
                        error '[ERROR] Could not find a version for all the defined projects. Stopping the job execution.'
                    }
                }
            }
        }
        stage('Fetch images tags') {
            steps {
                script {
                    def brewBuild
                    if (env.DATA_INDEX_EPHEMERAL_BREW) {
                        println '[INFO] Data-index-ephemeral brew build id defined as part of the job parameters'
                        brewBuild = env.DATA_INDEX_EPHEMERAL_BREW.trim()
                    } else {
                        println '[INFO] Data-index-ephemeral brew build not provided. Getting the latest one from brew.'
                        brewBuild = getLatestImageBuild("openshift-serverless-${getMinorProductVersion(milestone)}-rhel-8-container-candidate", "openshift-serverless-1-logic-data-index-ephemeral-rhel8-container").trim()
                    }

                    println "[INFO] BREW BUILD: ${brewBuild}"
                    imagesTags["data-index-ephemeral"] = getImageTag(brewBuild)
                }
            }
        }
        stage('Send UMB Message to QE') {
            steps {
                script {
                    def messageBody = getMessageBody(milestone, projectsAndVersions, imagesTags)
                    triggerUMBMessageJob(messageBody, milestone)
                }
            }
        }
    }
}

def encode(text) {
    return URLEncoder.encode(text, "UTF-8")
}

def encodeParams(params) {
    return params.collect({ it.getKey() + "=" + encode(it.getValue()) }).join("&")
}

def queryPNC(endpoint, params, pageIndex=0) {
    def queryURL = "${PNC_API_URL}/${endpoint}?pageIndex=${pageIndex}&pageSize=200&" + encodeParams(params)
    def response = sh(script: "curl -s -X GET \"Accept: application/json\" \"${queryURL}\"", returnStdout: true)
    return new JsonSlurper().parseText(response)
}

def getMilestonesForProduct(productId) {
    def endpoint = "products/${productId}/versions"
    def params = [q: ""]
    return queryPNC(endpoint, params)
}

def getCurrentMilestoneId(productId) {
    def result = getMilestonesForProduct(productId)
    return result.content.currentProductMilestone.id[result.totalHits - 1]
}

def getCurrentMilestone(productId) {
    def result = getMilestonesForProduct(productId)
    return result.content.currentProductMilestone.version[result.totalHits - 1]
}

def getMilestoneId(productId, milestone) {
    def result = getMilestonesForProduct(productId)
    for (int i = 0; i < result.totalHits; i++) {
        def productMilestones = result.content.productMilestones[i]
        def foundMilestone = productMilestones.find{it.value["version"] == milestone}
        if (foundMilestone) {
            return foundMilestone.key
        }
    }
    return null
}

def getNumberOfPages(endpoint, params) {
    def result = queryPNC(endpoint, params)
    return result.totalPages
}

def getBuildsFromMilestone(milestoneId, projects) {
    def projectsAndVersions = [:]
    def endpoint = "product-milestones/${milestoneId}/builds"
    def params = [q: "temporaryBuild==false"]
    def pagesNumber = getNumberOfPages(endpoint, params)
    for (int i = 0; i < pagesNumber; i++) {
        def result = queryPNC(endpoint, params, i)
        for (project in projects) {
            def projectVersions = result.content.findAll{it.project.name == project && it.status == "SUCCESS"}.attributes.BREW_BUILD_VERSION
            projectsAndVersions[project] = projectVersions.sort().last()
        }
    }
    return projectsAndVersions
}

def validateProjectsVersions(projectsAndVersions) {
    return projectsAndVersions.isEmpty() ? false : !projectsAndVersions.find{it.value == null} as Boolean
}

def getLatestImageBuild(tag, pkg) {
    return sh (
        script: "brew latest-build ${tag} ${pkg} | tail -n1 | cut -d \" \" -f1",
        returnStdout: true
    )
}

def getImageTag(brewBuild) {
    return sh (
        script: "brew buildinfo \"${brewBuild}\" | awk -F'Extra: ' '{print \$2}' | tr \\\' \\\" | sed 's|False|\"false\"|g' | sed 's|True|\"true\"|g' | sed 's|None|\"\"|g' | jq -e '.image.index.pull[0]'",
        returnStdout: true
    )
}

// Example: 1.25.1.CR1 --> 1.25
def getMinorProductVersion(milestone) {
    def splits = milestone.split("\\.");
    return "${splits[0]}.${splits[1]}"
}

def getMessageBody(milestone, projectsAndVersions, imagesTags) {
    return """
{
    "maven_repository_file_url": "${env.STAGING_SERVER_URL}/rhoss/rhoss-logic-${milestone}/openshift-serverless-logic-${milestone}-maven-repository.zip",
    "sources_file_url": "${env.STAGING_SERVER_URL}/rhoss/rhoss-logic-${milestone}/openshift-serverless-logic-${milestone}-src.zip",
    "version": {"serverlesslogic-rhba":"${milestone}","serverlesslogic":"${projectsAndVersions["kiegroup/kogito-runtimes"]}","drools":"${projectsAndVersions["kiegroup/drools"]}","platform.quarkus.bom":"${QUARKUS_VERSION}"},
    "image": {"data-index-ephemeral": ${imagesTags["data-index-ephemeral"]}}
}"""
}

def triggerUMBMessageJob(messageBody, milestone) {
    def umbVersion = milestone.split("\\.")[0] + milestone.split("\\.")[1]
    def topic = "VirtualTopic.qe.ci.ba.openshift-serverless-logic.${umbVersion}.cr.trigger"
    def eventType = "openshift-serverless-logic-${umbVersion}-cr-qe-trigger"

    println 'Triggering UMB message'
    println "[INFO] TOPIC: ${topic}"
    println "[INFO] EVENT_TYPE: ${eventType}"
    println "[INFO] Message Body: ${messageBody}"

    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
        [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
        [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
        [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
    ]
}
