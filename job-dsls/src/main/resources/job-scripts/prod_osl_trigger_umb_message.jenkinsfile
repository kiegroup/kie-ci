@Library('jenkins-pipeline-shared-libraries')_

import groovy.json.JsonSlurper
import java.net.URLEncoder

def projects = ["kiegroup/kogito-runtimes"] // Projects to find the productized version in a milestone. Projects should be part of OSL build group in PNC
def productId = "${env.PRODUCT_ID.trim() ?: '155'}"  // ID of OSL product in PNC

def images = [ // Images to find the tag in Brew
    'data-index-ephemeral': [brewBuildID: "${env.DATA_INDEX_EPHEMERAL_BREW}", brewPackageName: 'openshift-serverless-1-logic-data-index-ephemeral-rhel8-container', imageTag: ''],
    'swf-builder': [brewBuildID: "${env.SWF_BUILDER_BREW}", brewPackageName: 'openshift-serverless-1-logic-swf-builder-rhel8-container', imageTag: ''],
    'swf-devmode': [brewBuildID: "${env.SWF_DEVMODE_BREW}", brewPackageName: 'openshift-serverless-1-logic-swf-devmode-rhel8-container', imageTag: ''],
    'operator': [brewBuildID: "${env.OPERATOR_BREW}", brewPackageName: 'openshift-serverless-1-logic-rhel8-operator-container', imageTag: ''],
    'operator-bundle': [brewBuildID: "${env.OPERATOR_BUNDLE_BREW}", brewPackageName: 'openshift-serverless-1-logic-rhel8-operator-bundle-container', imageTag: '']
]

def projectsAndVersions = [:]
def milestoneId = ""
def milestone = ""


pipeline {
    agent {
        label 'kie-rhel7 && !built-in'
    }
    stages {
        stage('Print variables') {
            steps {
                println "[INFO] PRODUCT_ID: ${productId}"
                println "[INFO] MILESTONE: ${MILESTONE}"
                println "[INFO] DROOLS_VERSION: ${DROOLS_VERSION}"
                println "[INFO] QUARKUS_PLATFORM_VERSION: ${QUARKUS_PLATFORM_VERSION}"
                println "[INFO] QUARKUS_VERSION: ${QUARKUS_VERSION}"
                println "[INFO] PNC_API_URL: ${PNC_API_URL}"
                println "[INFO] DATA_INDEX_EPHEMERAL_BREW: ${DATA_INDEX_EPHEMERAL_BREW}"
                println "[INFO] SWF_BUILDER_BREW: ${SWF_BUILDER_BREW}"
                println "[INFO] SWF_DEVMODE_BREW: ${SWF_DEVMODE_BREW}"
                println "[INFO] OPERATOR_BREW: ${OPERATOR_BREW}"
                println "[INFO] OPERATOR_BUNDLE_BREW: ${OPERATOR_BUNDLE_BREW}"
            }
        }
        stage('Fetch current milestone') {
            steps {
                script {
                    if (env.MILESTONE) {
                        println '[INFO] Milestone defined as part of the job parameters.'
                        milestone = env.MILESTONE
                        milestoneId = pnc.getMilestoneId(productId, milestone)
                        if (!milestoneId) {
                            error "[ERROR] Could not find ${milestone} milestone. Stopping the job execution."
                        }
                    } else {
                        println '[INFO] Milestone was not defined as part of the job parameters. Using the latest available milestone for the product.'
                        milestone = pnc.getCurrentMilestoneForProduct(productId).version
                        milestoneId = pnc.getCurrentMilestoneId(productId)
                    }
                    println "[INFO] MILESTONE: ${milestone}"
                    println "[INFO] MILESTONE_ID: ${milestoneId}"
                }
            }
        }
        stage('Fetch builds versions') {
            steps {
                script {
                    projectsAndVersions = pnc.getBuildsFromMilestoneId(milestoneId, projects)
                    println "[INFO] projects and versions ${projectsAndVersions}"
                    if (!validateProjectsVersions(projectsAndVersions)) {
                        error '[ERROR] Could not find a version for all the defined projects. Stopping the job execution.'
                    }
                }
            }
        }
        stage('Fetch images tags') {
            steps {
                script {
                    def brewTag = "openshift-serverless-${getMinorProductVersion(milestone)}-rhel-8-container-candidate"
                    images.each { k, v ->
                        def brewBuild
                        if (v.brewBuildID) {
                            println "[INFO] ${k} brew build id defined as part of the job parameters"
                            brewBuild = v.brewBuildID.trim()
                        } else {
                            println "[INFO] ${k} brew build not provided. Getting the latest one from brew"
                            brewBuild = getLatestImageBuild(brewTag, v.brewPackageName).trim()
                        }
                        println "[INFO] BREW BUILD: ${brewBuild}"
                        v.imageTag = getImageTag(brewBuild).trim()
                    }
                }
            }
        }
        stage('Send UMB Message to QE') {
            steps {
                script {
                    def messageBody = getMessageBody(milestone, projectsAndVersions, images)
                    triggerUMBMessageJob(messageBody, milestone)
                }
            }
        }
    }
}

def validateProjectsVersions(projectsAndVersions) {
    return projectsAndVersions.isEmpty() ? false : !projectsAndVersions.find{it.value == null} as Boolean
}

def getLatestImageBuild(tag, pkg) {
    return sh (
        script: "brew latest-build ${tag} ${pkg} | tail -n1 | cut -d \" \" -f1",
        returnStdout: true
    )
}

def getImageTag(brewBuild) {
    return sh (
        script: "brew buildinfo \"${brewBuild}\" | awk -F'Extra: ' '{print \$2}' | tr \\\' \\\" | sed 's|False|\"false\"|g' | sed 's|True|\"true\"|g' | sed 's|None|\"\"|g' | jq -e '.image.index.pull[0]'",
        returnStdout: true
    )
}

// Example: 1.25.1.CR1 --> 1.25
def getMinorProductVersion(milestone) {
    def splits = milestone.split("\\.");
    return "${splits[0]}.${splits[1]}"
}

def getMessageBody(milestone, projectsAndVersions, images) {
    return """
{
    "maven_repository_file_url": "${env.STAGING_SERVER_URL}/rhoss/rhoss-logic-${milestone}/openshift-serverless-logic-${milestone}-maven-repository.zip",
    "sources_file_url": "${env.STAGING_SERVER_URL}/rhoss/rhoss-logic-${milestone}/openshift-serverless-logic-${milestone}-src.zip",
    "version": {"serverlesslogic-rhba":"${milestone}","serverlesslogic":"${projectsAndVersions["kiegroup/kogito-runtimes"]}","drools":"${DROOLS_VERSION}","platform.quarkus.bom":"${QUARKUS_PLATFORM_VERSION}", "quarkus.bom":"${QUARKUS_VERSION}"},
    "image": {"data-index-ephemeral":${images["data-index-ephemeral"].imageTag},"swf-builder":${images["swf-builder"].imageTag},"swf-devmode":${images["swf-devmode"].imageTag},"operator":${images["operator"].imageTag},"operator-bundle":${images["operator-bundle"].imageTag}}
}"""
}

def triggerUMBMessageJob(messageBody, milestone) {
    def umbVersion = milestone.split("\\.")[0] + milestone.split("\\.")[1]
    def topic = "VirtualTopic.qe.ci.ba.openshift-serverless-logic.${umbVersion}.cr.trigger"
    def eventType = "openshift-serverless-logic-${umbVersion}-cr-qe-trigger"

    println 'Triggering UMB message'
    println "[INFO] TOPIC: ${topic}"
    println "[INFO] EVENT_TYPE: ${eventType}"
    println "[INFO] Message Body: ${messageBody}"

    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
        [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
        [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
        [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
    ]
}
