def artifacts = [
    [originClassifier: 'maven-repository.zip', finalClassifier: 'maven-repository.zip', stageCommand: 'cp', info: 'Copying maven repository zip'],
    [originClassifier: 'license.zip', finalClassifier: 'licenses.zip', stageCommand: 'cp', info: 'Copying licenses zip'],
    [originClassifier: 'src.zip', finalClassifier: 'sources.zip', stageCommand: 'cp', info: 'Copying sources zip'],
    [originClassifier: 'offliner.zip', finalClassifier: 'offliner.zip', stageCommand: 'mv', info: 'Moving offliner zip']
]

pipeline {
    agent {
        label 'kie-rhel7 && !built-in'
    }

    environment {
        PRODUCT_NAME = PRODUCT_NAME.trim()
        VERSION = VERSION.trim()
        RCM_HOST = RCM_HOST.trim()
        STAGING_BASE_PATH = STAGING_BASE_PATH.trim()
        PRODUCT_NAME_LOWER_CASE = PRODUCT_NAME.toLowerCase()
        RHBA_FOLDER_PATH = "${STAGING_BASE_PATH}/rhba/rhba-${VERSION}"
        TARGET_FOLDER_PATH = "${STAGING_BASE_PATH}/${PRODUCT_NAME_LOWER_CASE}/${PRODUCT_NAME}-${VERSION}"
    }

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Print variables') {
            steps {
                println "[INFO] PRODUCT_NAME: ${PRODUCT_NAME}"
                println "[INFO] VERSION: ${VERSION}"
                println "[INFO] RCM_HOST: ${RCM_HOST}"
                println "[INFO] STAGING_BASE_PATH: ${STAGING_BASE_PATH}"
            }
        }

        stage('Clone integration-platform-tooling repository') {
            steps {
                sh "git clone ${INTEGRATION_PLATFORM_TOOLING_REPOSITORY} integration-platform-tooling"
            }
        }

        stage('Create offliner zip') {
            steps {
                script {
                    createOfflinerZip()
                }
            }
        }

        stage('Stage artifacts produced by CPaaS') {
            steps {
                script {
                    for (artifact in artifacts) {
                        stageArtifact(artifact)
                    }
                }
            }
        }

        stage('Generate maven repository text') {
            steps {
                script {
                    generateMavenRepositoryText()
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

def createOfflinerZip() {
    println 'Creating offliner zip'
    def offlinerFolderName = "${PRODUCT_NAME_LOWER_CASE}-${getMilestoneVersion(VERSION)}-offliner"
    def offlinerFolderPath = "${RHBA_FOLDER_PATH}/${offlinerFolderName}"

    remoteExec("mkdir -p ${offlinerFolderPath}")
    remoteExec("cp ${RHBA_FOLDER_PATH}/offliner.txt ${offlinerFolderPath}")
    sshagent(credentials: ['rcm-publish-server']) {
        sh "scp -o StrictHostKeyChecking=no integration-platform-tooling/scripts/rhba/build-offline-repo.sh rhba@${RCM_HOST}:${offlinerFolderPath}/offline-repo-builder.sh"
    }
    remoteExec("cd ${RHBA_FOLDER_PATH}; zip -r rhba-${VERSION}-offliner.zip ${offlinerFolderName}")
    remoteExec("rm -rf ${offlinerFolderPath}")
}

def stageArtifact(artifact) {
    def artifactPath = "${RHBA_FOLDER_PATH}/rhba-${VERSION}-${artifact.originClassifier}"
    def targetArtifactPath = "${TARGET_FOLDER_PATH}/${PRODUCT_NAME_LOWER_CASE}-${getMilestoneVersion(VERSION)}-${artifact.finalClassifier}"
    println "${artifact.info} from ${artifactPath} to ${targetArtifactPath}"
    remoteExec("${artifact.stageCommand} ${artifactPath} ${targetArtifactPath}")
}

def generateMavenRepositoryText() {
    println 'Generating maven repository text file'
    def mavenRepoFileName = "${PRODUCT_NAME_LOWER_CASE}-${getMilestoneVersion(VERSION)}-maven-repository"
    remoteExec("cd ${TARGET_FOLDER_PATH}; unzip -t ${mavenRepoFileName}.zip > ${mavenRepoFileName}.text")
}

def getMilestoneVersion(version) {
    return version.substring(0, version.lastIndexOf('.'))
}

def remoteExec(command) {
    sshagent(['rcm-publish-server']) {
        return sh(script: "ssh -o StrictHostKeyChecking=no rhba@${RCM_HOST} '${command}'", returnStdout: true)
    }
}
