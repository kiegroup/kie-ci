@Library('jenkins-pipeline-shared-libraries')_

import groovy.json.JsonSlurper
import java.net.URLEncoder

// Projects to find the productized version in a milestone
def projects = ["kiegroup/optaplanner"]
// ID of Red Hat build of OptaPlanner product in PNC.
def productId = "${env.PRODUCT_ID.trim() ?: '161'}"

def projectsAndVersions = [:]
def milestoneId = ""
def milestone = ""

pipeline {
    agent{
        label 'kie-rhel7 && !master'
    }
    stages{
        stage('Print variables') {
            steps {
                println "[INFO] PNC_API_URL: ${PNC_API_URL}"
                println "[INFO] INDY_URL: ${INDY_URL}"
                println "[INFO] DROOLS_VERSION: ${DROOLS_VERSION}"
                println "[INFO] QUARKUS_VERSION: ${QUARKUS_VERSION}"
                println "[INFO] QUARKUS_PLATFORM_VERSION: ${QUARKUS_PLATFORM_VERSION}"
                println "[INFO] PROJECTS: ${projects}"
                println "[INFO] PRODUCT_ID: ${productId}"
            }
        }
        stage('Fetch current milestone') {
            steps{
                script {
                    if (env.MILESTONE) {
                        println '[INFO] Milestone defined as part of the job parameters.'
                        milestone = env.MILESTONE
                        milestoneId = pnc.getMilestoneId(productId, milestone)
                        if (!milestoneId) {
                            error "[ERROR] Could not find ${milestone} milestone. Stopping the job execution."
                        }
                    } else {
                        println '[INFO] Milestone was not defined as part of the job parameters. Using the latest available milestone for the product.'
                        milestone = pnc.getCurrentMilestoneForProduct(productId).version
                        milestoneId = pnc.getCurrentMilestoneId(productId)
                    }
                    println "[INFO] MILESTONE: ${milestone}"
                    println "[INFO] MILESTONE_ID: ${milestoneId}"
                }
            }
        }
        stage('Fetch builds versions') {
            steps {
                script {
                    projectsAndVersions = pnc.getBuildsFromMilestoneId(milestoneId, projects)
                    println "[INFO] projects and versions ${projectsAndVersions}"
                    if (!validateProjectsVersions(projectsAndVersions)) {
                        error '[ERROR] Could not find a version for all the defined projects. Stopping the job execution.'
                    }
                }
            }
        }
        stage('Send UMB Message to QE') {
            steps {
                script {
                    def messageBody = getMessageBody(milestone, projectsAndVersions)
                    triggerUMBMessageJob(messageBody, milestone)
                }
            }
        }
    }
}

// check if the project-versions map is valid or not
def validateProjectsVersions(projectsAndVersions) {
    return projectsAndVersions.isEmpty() ? false : !projectsAndVersions.find{it.value == null} as Boolean
}

// generate UMB message body
def getMessageBody(milestone, projectsAndVersions) {
    def productVersion = milestone.substring(0, milestone.lastIndexOf("."))
    return """
{
    "built_projects": ["drools","optaplanner","optaplanner-quickstarts","jboss-integration/rhbop-optaplanner"],
    "version": {"rhbop":"${milestone}","optaplanner":"${projectsAndVersions["kiegroup/optaplanner"]}","drools":"${DROOLS_VERSION}","quarkus.bom":"${QUARKUS_VERSION}","platform.quarkus.bom":"${QUARKUS_PLATFORM_VERSION}"},
    "maven_repository_file_url": "${env.STAGING_SERVER_URL}rhbop/rhbop-${milestone}/rhbop-${productVersion}-optaplanner-maven-repository.zip",
    "offliner_file_url": "${env.STAGING_SERVER_URL}rhbop/rhbop-${milestone}/rhbop-${productVersion}-optaplanner-offliner.zip",
    "archives": "${INDY_URL}",
    "sources": {
        "optaplanner": "${env.STAGING_SERVER_URL}rhbop/rhbop-${milestone}/rhbop-${productVersion}-optaplanner-sources.zip",
        "optaplanner-quickstarts": "${env.STAGING_SERVER_URL}rhbop/rhbop-${milestone}/rhbop-${productVersion}-optaplanner-quickstarts-sources.zip"
    }
}"""
}

// send UMB message for a specific milestone
def triggerUMBMessageJob(messageBody, milestone) {
    def umbVersion = milestone.split("\\.")[0] + milestone.split("\\.")[1]
    def topic = "VirtualTopic.qe.ci.ba.rhbop.${umbVersion}.cr.trigger"
    def eventType = "rhbop-${umbVersion}-cr-qe-trigger"

    println 'Triggering UMB message'
    println "[INFO] TOPIC: ${topic}"
    println "[INFO] EVENT_TYPE: ${eventType}"
    println "[INFO] Message Body: ${messageBody}"

    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
        [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
        [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
        [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
    ]
}
