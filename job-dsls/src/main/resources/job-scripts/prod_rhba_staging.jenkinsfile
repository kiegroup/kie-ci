@Library('jenkins-pipeline-shared-libraries')_

import groovy.json.JsonSlurper
import java.net.URLEncoder

PNC_API_URL = PNC_API_URL.trim()
STAGING_BASE_PATH = "${RCM_GUEST_FOLDER}"
MILESTONE = MILESTONE.trim()
RCM_HOST = RCM_HOST.trim()

node('kie-rhel7-pipeline && !built-in') {
    def projects = [
        [
            name: "kiegroup/rhba",
            artifacts: [
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "zip", classifier: "add-ons"],
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "zip", classifier: "business-central-eap7-deployable"],
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "jar", classifier: "business-central-standalone"],
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "zip", classifier: "kie-server-ee8"],
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "zip", classifier: "kie-server-ee7"],
                [product: "rhpam", group: "org.kie.rhba", name: "rhpam", package: "zip", classifier: "monitoring-ee7"],
            ]
        ], [
            name: "rhba-installers",
            artifacts: [
                [product: "rhpam", group: "org.jboss.installer", name: "rhpam-installer", package: "jar"]
            ]
        ], [
            name: "jboss-integration/bxms-patch-tools",
            artifacts: [
                [product: "rhpam", group: "org.jboss.brms-bpmsuite.patching", name: "rhpam", package: "zip", classifier: "update"]
            ]
        ]
    ]

    stage("Print variables") {
        println "[INFO] PNC_API_URL: ${PNC_API_URL}"
        println "[INFO] STAGING_BASE_PATH: ${STAGING_BASE_PATH}"
        println "[INFO] MILESTONE: ${MILESTONE}"
        println "[INFO] RCM_HOST: ${RCM_HOST}"
    }

    stage("Staging") {
        for (project in projects) {
            println "[INFO] staging artifacts for project: ${project.name}"
            def projectId = getProjectId(project.name)
            def lastVersion = getLastProjectVersion(projectId, MILESTONE)

            for (artifact in project.artifacts) {
                def identifier = identifier(artifact, lastVersion)
                println "[INFO] staging artifact: ${identifier}"

                def artifactMetadata = getArtifactMetadata(identifier)
                def artifactPath = "${STAGING_BASE_PATH}/${stagingPath(artifact)}"
                def relativeArtifactPath = "staging/${stagingPath(artifact)}"
                def artifactDirectoryPath = artifactPath - ~/\/[^\/]+$/

                println "[INFO] (re)creating staging target path in: ${artifactPath}"
                createStagingPath(artifactDirectoryPath)

                println "[INFO] staging artifact from: ${artifactMetadata.publicUrl}"
                stageArtifact(artifactMetadata.publicUrl, relativeArtifactPath)
            }
        }
    }
}

/*
 * PNC API helper
 */
def queryPNC(endpoint, params) {
    def queryURL = "${PNC_API_URL}/${endpoint}?" + encodeParams(params)
    def response = sh(script: "curl -s -X GET --header \"Accept: application/json\" \"${queryURL}\"", returnStdout: true)
    return new JsonSlurper().parseText(response)
}

def encodeParams(params) {
    return params.collect({ it.getKey() + "=" + encode(it.getValue()) }).join("&")
}

def encode(text) {
    return URLEncoder.encode(text, "UTF-8")
}

/*
 * PNC API calls
 */
def getProjectId(projectName) {
    def endpoint = "projects"
    def params = [q: "name==${projectName}"]
    def projects = queryPNC(endpoint, params)
    def project = projects.content.first()
    return project.id
}

def getLastProjectVersion(projectId, milestone) {
    def endpoint = "projects/${projectId}/builds"
    def params = [q: "productMilestone.version==${milestone};status==SUCCESS;temporaryBuild==false"]
    def projectBuilds = queryPNC(endpoint, params)
    def lastprojectBuild = projectBuilds.content.max({ it.attributes.BREW_BUILD_VERSION })
    return lastprojectBuild.attributes.BREW_BUILD_VERSION
}

def getArtifactMetadata(identifier) {
    def endpoint = "artifacts"
    def params = [q: "identifier==${identifier}"]
    def artifacts = queryPNC(endpoint, params)
    def artifact = artifacts.content.first()
    return [
        publicUrl: artifact.publicUrl,
        md5: artifact.md5
    ]
}

/*
 * Auxiliary methods
 */
def identifier(artifact, version) {
    def identifierParts = [artifact.group, artifact.name, artifact.package, version, artifact.classifier]
    return identifierParts.findAll({ it != null }).join(":")
}

/*
 * Staging management
 */
def stagingPath(artifact) {
    def productStagingCode = [artifact.product.toUpperCase(), MILESTONE].join("-")
    def productStagingPath = "${artifact.product}/${productStagingCode}"
    def version = MILESTONE - ~/\.[^\.]+$/
    def artifactName = [artifact.name, version, artifact.classifier].findAll({ it != null }).join("-")
    return "${productStagingPath}/${artifactName}.${artifact.package}"
}

def createStagingPath(path) {
    remoteExec("mkdir -m 775 -p ${path}")
}

def stageArtifact(url, path) {
    // need to use indy-admin here as there's a caching bug which can make some downloads fail
    def indyAdmin = url.replace("indy", "indy-admin")
    println "[INFO] staging ${indyAdmin} to ${path}"

    def localFileName = path.split('/').last()
    sh "curl -s ${indyAdmin} -o ${localFileName}"
    sh "chmod 664 ${localFileName}"

    util.withKerberos('rhba-prod-keytab') {
        sh "rsync -rlp --info=progress2 ${localFileName} rhba-prod@${RCM_HOST}:${path}"
    }
}

def remoteExec(command) {
    util.withKerberos('rhba-prod-keytab') {
        return sh(script: "ssh rhba-prod@${RCM_HOST} '${command}'", returnStdout: true)
    }
}
